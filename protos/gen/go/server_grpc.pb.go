// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: server.proto

package pbserver

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ExpressionServiceClient is the client API for ExpressionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExpressionServiceClient interface {
	GetNewExpression(ctx context.Context, in *ExpressionRequest, opts ...grpc.CallOption) (*ExpressionResponse, error)
	SendResult(ctx context.Context, in *SendResultRequest, opts ...grpc.CallOption) (*SendResultResponse, error)
	SendError(ctx context.Context, in *SendErrorRequest, opts ...grpc.CallOption) (*SendErrorResponse, error)
}

type expressionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExpressionServiceClient(cc grpc.ClientConnInterface) ExpressionServiceClient {
	return &expressionServiceClient{cc}
}

func (c *expressionServiceClient) GetNewExpression(ctx context.Context, in *ExpressionRequest, opts ...grpc.CallOption) (*ExpressionResponse, error) {
	out := new(ExpressionResponse)
	err := c.cc.Invoke(ctx, "/expression.ExpressionService/GetNewExpression", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expressionServiceClient) SendResult(ctx context.Context, in *SendResultRequest, opts ...grpc.CallOption) (*SendResultResponse, error) {
	out := new(SendResultResponse)
	err := c.cc.Invoke(ctx, "/expression.ExpressionService/SendResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expressionServiceClient) SendError(ctx context.Context, in *SendErrorRequest, opts ...grpc.CallOption) (*SendErrorResponse, error) {
	out := new(SendErrorResponse)
	err := c.cc.Invoke(ctx, "/expression.ExpressionService/SendError", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExpressionServiceServer is the server API for ExpressionService service.
// All implementations must embed UnimplementedExpressionServiceServer
// for forward compatibility
type ExpressionServiceServer interface {
	GetNewExpression(context.Context, *ExpressionRequest) (*ExpressionResponse, error)
	SendResult(context.Context, *SendResultRequest) (*SendResultResponse, error)
	SendError(context.Context, *SendErrorRequest) (*SendErrorResponse, error)
	mustEmbedUnimplementedExpressionServiceServer()
}

// UnimplementedExpressionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedExpressionServiceServer struct {
}

func (UnimplementedExpressionServiceServer) GetNewExpression(context.Context, *ExpressionRequest) (*ExpressionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNewExpression not implemented")
}
func (UnimplementedExpressionServiceServer) SendResult(context.Context, *SendResultRequest) (*SendResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendResult not implemented")
}
func (UnimplementedExpressionServiceServer) SendError(context.Context, *SendErrorRequest) (*SendErrorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendError not implemented")
}
func (UnimplementedExpressionServiceServer) mustEmbedUnimplementedExpressionServiceServer() {}

// UnsafeExpressionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExpressionServiceServer will
// result in compilation errors.
type UnsafeExpressionServiceServer interface {
	mustEmbedUnimplementedExpressionServiceServer()
}

func RegisterExpressionServiceServer(s grpc.ServiceRegistrar, srv ExpressionServiceServer) {
	s.RegisterService(&ExpressionService_ServiceDesc, srv)
}

func _ExpressionService_GetNewExpression_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExpressionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExpressionServiceServer).GetNewExpression(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/expression.ExpressionService/GetNewExpression",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExpressionServiceServer).GetNewExpression(ctx, req.(*ExpressionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExpressionService_SendResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExpressionServiceServer).SendResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/expression.ExpressionService/SendResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExpressionServiceServer).SendResult(ctx, req.(*SendResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExpressionService_SendError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendErrorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExpressionServiceServer).SendError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/expression.ExpressionService/SendError",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExpressionServiceServer).SendError(ctx, req.(*SendErrorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ExpressionService_ServiceDesc is the grpc.ServiceDesc for ExpressionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExpressionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "expression.ExpressionService",
	HandlerType: (*ExpressionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNewExpression",
			Handler:    _ExpressionService_GetNewExpression_Handler,
		},
		{
			MethodName: "SendResult",
			Handler:    _ExpressionService_SendResult_Handler,
		},
		{
			MethodName: "SendError",
			Handler:    _ExpressionService_SendError_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server.proto",
}
